package com.lottery.pay.progress.elinkdraw.util;

public class DesKey {
	private byte[] keysced_;
	  private boolean is_weak_key_;
	  private boolean is_parity_ok_;
	  
	  public DesKey(byte[] key, boolean check_key)
	  {
	    this.keysced_ = new byte['Â€'];
	    set_odd_parity(key);
	    set_key_sced(key, check_key);
	  }
	  
	  public void DesKey(String str, boolean check_key)
	  {
	    byte[] key = new byte[8];
	    byte[] keystr = new byte[str.length()];
	    for (int i = 0; i < 8; i++) {
	      key[i] = 0;
	    }
	    for (int i = 0; i < str.length(); i++)
	    {
	      byte tmp51_50 = ((byte)str.charAt(i));byte j = tmp51_50;keystr[i] = tmp51_50;
	      if (i % 16 < 8)
	      {
	        int tmp71_70 = (i % 8); byte[] tmp71_65 = key;tmp71_65[tmp71_70] = ((byte)(tmp71_65[tmp71_70] ^ j << 1));
	      }
	      else
	      {
	        j = (byte)(j << 4 & 0xF0 | j >>> 4 & 0xF);
	        j = (byte)(j << 2 & 0xCC | j >>> 2 & 0x33);
	        j = (byte)(j << 1 & 0xAA | j >>> 1 & 0x55); int 
	          tmp149_148 = (7 - i % 8); byte[] tmp149_140 = key;tmp149_140[tmp149_148] = ((byte)(tmp149_140[tmp149_148] ^ j));
	      }
	    }
	    set_odd_parity(key);
	    set_key_sced(key, false);
	    Des des = new Des(this);
	    des.cbc_cksum(keystr, 0, keystr.length, key, 0, key);
	    set_odd_parity(key);
	    set_key_sced(key, check_key);
	  }
	  
	  private boolean check_parity(byte[] key)
	  {
	    for (int i = 0; i < 8; i++) {
	      if (key[i] != odd_parity_array[(key[i] & 0xFF)])
	      {
	        this.is_parity_ok_ = false;
	        return false;
	      }
	    }
	    this.is_parity_ok_ = true;
	    return true;
	  }
	  
	  private boolean check_weak_key(byte[] key)
	  {
	    for (int i = 0; i < weak_keys.length; i++)
	    {
	      int j=0;
	      for (j = 0; j < 8; j++) {
	        if (key[j] != weak_keys[i][j]) {
	          break;
	        }
	      }
	      if (j == 8)
	      {
	        this.is_weak_key_ = true;
	        return true;
	      }
	    }
	    this.is_weak_key_ = false;
	    return false;
	  }
	  
	  public byte[] get_keysced()
	  {
	    return this.keysced_;
	  }
	  
	  public boolean is_parity_ok()
	  {
	    return this.is_parity_ok_;
	  }
	  
	  public boolean is_weak_key()
	  {
	    return this.is_weak_key_;
	  }
	  
	  private void set_key_sced(byte[] key, boolean check_key)
	  {
	    if (check_key)
	    {
	      if (!check_parity(key)) {
	        return;
	      }
	      if (check_weak_key(key)) {
	        return;
	      }
	    }
	    int key_c0 = Int32Manipulator.bytes_to_int(key, 0);
	    int key_d0 = Int32Manipulator.bytes_to_int(key, 4);
	    int tmp = 0;
	    int[] ref_to_c0 = new int[1];
	    int[] ref_to_d0 = new int[1];
	    ref_to_c0[0] = key_c0;
	    ref_to_d0[0] = key_d0;
	    Int32Manipulator.PERM_OP(ref_to_d0, ref_to_c0, tmp, 4, 252645135);
	    Int32Manipulator.HPERM_OP(ref_to_c0, tmp, -2, -859045888);
	    Int32Manipulator.HPERM_OP(ref_to_d0, tmp, -2, -859045888);
	    Int32Manipulator.PERM_OP(ref_to_d0, ref_to_c0, tmp, 1, 1431655765);
	    Int32Manipulator.PERM_OP(ref_to_c0, ref_to_d0, tmp, 8, 16711935);
	    Int32Manipulator.PERM_OP(ref_to_d0, ref_to_c0, tmp, 1, 1431655765);
	    key_c0 = ref_to_c0[0];
	    key_d0 = ref_to_d0[0];
	    key_d0 = (key_d0 & 0xFF) << 16 | key_d0 & 0xFF00 | (key_d0 & 0xFF0000) >>> 16 | (key_c0 & 0xF0000000) >>> 4;
	    key_c0 &= 0xFFFFFFF;
	    for (int i = 0; i < 16; i++)
	    {
	      if (shifts2[i])
	      {
	        key_c0 = key_c0 >>> 2 | key_c0 << 26;
	        key_d0 = key_d0 >>> 2 | key_d0 << 26;
	      }
	      else
	      {
	        key_c0 = key_c0 >>> 1 | key_c0 << 27;
	        key_d0 = key_d0 >>> 1 | key_d0 << 27;
	      }
	      key_c0 &= 0xFFFFFFF;
	      key_d0 &= 0xFFFFFFF;
	      int tmp1 = des_skb[0][(key_c0 & 0x3F)] | des_skb[1][(key_c0 >>> 6 & 0x3 | key_c0 >>> 7 & 0x3C)] | des_skb[2][(key_c0 >>> 13 & 0xF | key_c0 >>> 14 & 0x30)] | des_skb[3][(key_c0 >>> 20 & 0x1 | key_c0 >>> 21 & 0x6 | key_c0 >>> 22 & 0x38)];
	      tmp = des_skb[4][(key_d0 & 0x3F)] | des_skb[5][(key_d0 >>> 7 & 0x3 | key_d0 >> 8 & 0x3C)] | des_skb[6][(key_d0 >>> 15 & 0x3F)] | des_skb[7][(key_d0 >>> 21 & 0xF | key_d0 >>> 22 & 0x30)];
	      Int32Manipulator.set_int(this.keysced_, i * 8, tmp << 16 | tmp1 & 0xFFFF);
	      tmp1 = tmp1 >>> 16 | tmp & 0xFFFF0000;
	      tmp1 = tmp1 << 4 | tmp1 >>> 28;
	      Int32Manipulator.set_int(this.keysced_, i * 8 + 4, tmp1);
	    }
	  }
	  
	  public static void set_odd_parity(byte[] key)
	  {
	    for (int i = 0; i < 8; i++) {
	      key[i] = odd_parity_array[(key[i] & 0xFF)];
	    }
	  }
	  
	  private static final byte[] odd_parity_array = {
	    1, 1, 2, 2, 4, 4, 7, 7, 8, 8, 
	    11, 11, 13, 13, 14, 14, 16, 16, 19, 19, 
	    21, 21, 22, 22, 25, 25, 26, 26, 28, 28, 
	    31, 31, 32, 32, 35, 35, 37, 37, 38, 38, 
	    41, 41, 42, 42, 44, 44, 47, 47, 49, 49, 
	    50, 50, 52, 52, 55, 55, 56, 56, 59, 59, 
	    61, 61, 62, 62, 64, 64, 67, 67, 69, 69, 
	    70, 70, 73, 73, 74, 74, 76, 76, 79, 79, 
	    81, 81, 82, 82, 84, 84, 87, 87, 88, 88, 
	    91, 91, 93, 93, 94, 94, 97, 97, 98, 98, 
	    100, 100, 103, 103, 104, 104, 107, 107, 109, 109, 
	    110, 110, 112, 112, 115, 115, 117, 117, 118, 118, 
	    121, 121, 122, 122, 124, 124, 127, 127, -128, -128, 
	    -125, -125, -123, -123, -122, -122, -119, -119, -118, -118, 
	    -116, -116, -113, -113, -111, -111, -110, -110, -108, -108, 
	    -105, -105, -104, -104, -101, -101, -99, -99, -98, -98, 
	    -95, -95, -94, -94, -92, -92, -89, -89, -88, -88, 
	    -85, -85, -83, -83, -82, -82, -80, -80, -77, -77, 
	    -75, -75, -74, -74, -71, -71, -70, -70, -68, -68, 
	    -65, -65, -63, -63, -62, -62, -60, -60, -57, -57, 
	    -56, -56, -53, -53, -51, -51, -50, -50, -48, -48, 
	    -45, -45, -43, -43, -42, -42, -39, -39, -38, -38, 
	    -36, -36, -33, -33, -32, -32, -29, -29, -27, -27, 
	    -26, -26, -23, -23, -22, -22, -20, -20, -17, -17, 
	    -15, -15, -14, -14, -12, -12, -9, -9, -8, -8, 
	    -5, -5, -3, -3, -2, -2 };
	  private static final boolean[] shifts2 = {
	    false, false, true, true, true, true, true, true, false, true, 
	    true, true, true, true, true };
	  private static final int[][] des_skb = {
	    {
	    0, 16, 536870912, 536870928, 65536, 65552, 536936448, 536936464, 2048, 2064, 
	    536872960, 536872976, 67584, 67600, 536938496, 536938512, 32, 48, 536870944, 536870960, 
	    65568, 65584, 536936480, 536936496, 2080, 2096, 536872992, 536873008, 67616, 67632, 
	    536938528, 536938544, 524288, 524304, 537395200, 537395216, 589824, 589840, 537460736, 537460752, 
	    526336, 526352, 537397248, 537397264, 591872, 591888, 537462784, 537462800, 524320, 524336, 
	    537395232, 537395248, 589856, 589872, 537460768, 537460784, 526368, 526384, 537397280, 537397296, 
	    591904, 591920, 537462816, 537462832 }, 
	    {
	    0, 33554432, 8192, 33562624, 2097152, 35651584, 2105344, 35659776, 4, 33554436, 
	    8196, 33562628, 2097156, 35651588, 2105348, 35659780, 1024, 33555456, 9216, 33563648, 
	    2098176, 35652608, 2106368, 35660800, 1028, 33555460, 9220, 33563652, 2098180, 35652612, 
	    2106372, 35660804, 268435456, 301989888, 268443648, 301998080, 270532608, 304087040, 270540800, 304095232, 
	    268435460, 301989892, 268443652, 301998084, 270532612, 304087044, 270540804, 304095236, 268436480, 301990912, 
	    268444672, 301999104, 270533632, 304088064, 270541824, 304096256, 268436484, 301990916, 268444676, 301999108, 
	    270533636, 304088068, 270541828, 304096260 }, 
	    {
	    0, 1, 262144, 262145, 16777216, 16777217, 17039360, 17039361, 2, 3, 
	    262146, 262147, 16777218, 16777219, 17039362, 17039363, 512, 513, 262656, 262657, 
	    16777728, 16777729, 17039872, 17039873, 514, 515, 262658, 262659, 16777730, 16777731, 
	    17039874, 17039875, 134217728, 134217729, 134479872, 134479873, 150994944, 150994945, 151257088, 151257089, 
	    134217730, 134217731, 134479874, 134479875, 150994946, 150994947, 151257090, 151257091, 134218240, 134218241, 
	    134480384, 134480385, 150995456, 150995457, 151257600, 151257601, 134218242, 134218243, 134480386, 134480387, 
	    150995458, 150995459, 151257602, 151257603 }, 
	    {
	    0, 1048576, 256, 1048832, 8, 1048584, 264, 1048840, 4096, 1052672, 
	    4352, 1052928, 4104, 1052680, 4360, 1052936, 67108864, 68157440, 67109120, 68157696, 
	    67108872, 68157448, 67109128, 68157704, 67112960, 68161536, 67113216, 68161792, 67112968, 68161544, 
	    67113224, 68161800, 131072, 1179648, 131328, 1179904, 131080, 1179656, 131336, 1179912, 
	    135168, 1183744, 135424, 1184000, 135176, 1183752, 135432, 1184008, 67239936, 68288512, 
	    67240192, 68288768, 67239944, 68288520, 67240200, 68288776, 67244032, 68292608, 67244288, 68292864, 
	    67244040, 68292616, 67244296, 68292872 }, 
	    {
	    0, 268435456, 65536, 268500992, 4, 268435460, 65540, 268500996, 536870912, 805306368, 
	    536936448, 805371904, 536870916, 805306372, 536936452, 805371908, 1048576, 269484032, 1114112, 269549568, 
	    1048580, 269484036, 1114116, 269549572, 537919488, 806354944, 537985024, 806420480, 537919492, 806354948, 
	    537985028, 806420484, 4096, 268439552, 69632, 268505088, 4100, 268439556, 69636, 268505092, 
	    536875008, 805310464, 536940544, 805376000, 536875012, 805310468, 536940548, 805376004, 1052672, 269488128, 
	    1118208, 269553664, 1052676, 269488132, 1118212, 269553668, 537923584, 806359040, 537989120, 806424576, 
	    537923588, 806359044, 537989124, 806424580 }, 
	    {
	    0, 134217728, 8, 134217736, 1024, 134218752, 1032, 134218760, 131072, 134348800, 
	    131080, 134348808, 132096, 134349824, 132104, 134349832, 1, 134217729, 9, 134217737, 
	    1025, 134218753, 1033, 134218761, 131073, 134348801, 131081, 134348809, 132097, 134349825, 
	    132105, 134349833, 33554432, 167772160, 33554440, 167772168, 33555456, 167773184, 33555464, 167773192, 
	    33685504, 167903232, 33685512, 167903240, 33686528, 167904256, 33686536, 167904264, 33554433, 167772161, 
	    33554441, 167772169, 33555457, 167773185, 33555465, 167773193, 33685505, 167903233, 33685513, 167903241, 
	    33686529, 167904257, 33686537, 167904265 }, 
	    {
	    0, 256, 524288, 524544, 16777216, 16777472, 17301504, 17301760, 16, 272, 
	    524304, 524560, 16777232, 16777488, 17301520, 17301776, 2097152, 2097408, 2621440, 2621696, 
	    18874368, 18874624, 19398656, 19398912, 2097168, 2097424, 2621456, 2621712, 18874384, 18874640, 
	    19398672, 19398928, 512, 768, 524800, 525056, 16777728, 16777984, 17302016, 17302272, 
	    528, 784, 524816, 525072, 16777744, 16778000, 17302032, 17302288, 2097664, 2097920, 
	    2621952, 2622208, 18874880, 18875136, 19399168, 19399424, 2097680, 2097936, 2621968, 2622224, 
	    18874896, 18875152, 19399184, 19399440 }, 
	    {
	    0, 67108864, 262144, 67371008, 2, 67108866, 262146, 67371010, 8192, 67117056, 
	    270336, 67379200, 8194, 67117058, 270338, 67379202, 32, 67108896, 262176, 67371040, 
	    34, 67108898, 262178, 67371042, 8224, 67117088, 270368, 67379232, 8226, 67117090, 
	    270370, 67379234, 2048, 67110912, 264192, 67373056, 2050, 67110914, 264194, 67373058, 
	    10240, 67119104, 272384, 67381248, 10242, 67119106, 272386, 67381250, 2080, 67110944, 
	    264224, 67373088, 2082, 67110946, 264226, 67373090, 10272, 67119136, 272416, 67381280, 
	    10274, 67119138, 272418, 67381282 } };
	  private static final byte[][] weak_keys = {
	    {
	    1, 1, 1, 1, 1, 1, 1, 1 }, 
	    {
	    -2, -2, -2, -2, -2, -2, -2, -2 }, 
	    {
	    31, 31, 31, 31, 31, 31, 31, 31 }, 
	    {
	    -32, -32, -32, -32, -32, -32, -32, -32 }, 
	    {
	    1, -2, 1, -2, 1, -2, 1, -2 }, 
	    {
	    -2, 1, -2, 1, -2, 1, -2, 1 }, 
	    {
	    31, -32, 31, -32, 14, -15, 14, -15 }, 
	    {
	    -32, 31, -32, 31, -15, 14, -15, 14 }, 
	    {
	    1, -32, 1, -32, 1, -15, 1, -15 }, 
	    {
	    -32, 1, -32, 1, -15, 1, -15, 1 }, 
	    {
	    31, -2, 31, -2, 14, -2, 14, -2 }, 
	    {
	    -2, 31, -2, 31, -2, 14, -2, 14 }, 
	    {
	    1, 31, 1, 31, 1, 14, 1, 14 }, 
	    {
	    31, 1, 31, 1, 14, 1, 14, 1 }, 
	    {
	    -32, -2, -32, -2, -15, -2, -15, -2 }, 
	    {
	    -2, -32, -2, -32, -2, -15, -2, -15 } };
}

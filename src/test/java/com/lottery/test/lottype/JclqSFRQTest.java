package com.lottery.test.lottype;

import java.math.BigDecimal;

import org.junit.Assert;
import org.junit.Test;

import com.lottery.lottype.Jclqrqsf;

public class JclqSFRQTest {

	Jclqrqsf sf = new Jclqrqsf();
	
	@Test
	public void testValidate() {
		Assert.assertTrue(sf.validate("300211001-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(3600), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300212001-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(28800), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300213001-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(134400), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300214001-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(403200), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300215001-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(806400), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300216001-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(1075200), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300217001-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(921600), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300218001-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(460800), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300213003-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(201600), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300213004-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(336000), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300214004-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(806400), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300214005-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(1209600), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300214006-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(604800), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300214011-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(1814400), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300215005-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(2016000), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300215006-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(2822400), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300215010-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(1008000), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300215016-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(4838400), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300215020-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(3024000), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300215026-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(5846400), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300216006-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(3225600), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300216007-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(4300800), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300216015-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(1008000), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300216020-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(2688000), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300216022-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(8332800), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300216035-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(3696000), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300216042-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(11020800), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300216050-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(7728000), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300216057-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(12028800), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300217007-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(3225600), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300217008-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(4147200), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300217021-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(4838400), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300217035-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(4032000), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300217120-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(15638400), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300218008-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(1843200), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300218009-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(2304000), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300218028-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(3225600), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300218056-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(3225600), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300218070-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(2016000), new BigDecimal(1), 200));
		Assert.assertTrue(sf.validate("300218247-20140402301(0,3)|20140402302(0,3)|20140402303(0,3)|20140402304(0,3)|20140402305(0,3)|20140402306(0,3)|20140402307(0,3)|20140402308(0,3)|20140402309(0,3)^", new BigDecimal(11779200), new BigDecimal(1), 200));
	}
}

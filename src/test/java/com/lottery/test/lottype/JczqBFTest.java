package com.lottery.test.lottype;

import java.math.BigDecimal;

import org.junit.Assert;
import org.junit.Test;

import com.lottery.lottype.Jczqbifen;

public class JczqBFTest {

	Jczqbifen bf = new Jczqbifen();
	
	
	@Test
	public void testValidate() {
		Assert.assertTrue(bf.validate("300711001-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(8000), new BigDecimal(1), 200));
		Assert.assertTrue(bf.validate("300712001-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(61600), new BigDecimal(1), 200));
		Assert.assertTrue(bf.validate("300713001-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(187600), new BigDecimal(1), 200));
		Assert.assertTrue(bf.validate("300714001-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(245400), new BigDecimal(1), 200));
		
		Assert.assertTrue(bf.validate("300713003-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(184800), new BigDecimal(1), 200));
		Assert.assertTrue(bf.validate("300713004-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(372400), new BigDecimal(1), 200));
		
		Assert.assertTrue(bf.validate("300714004-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(375200), new BigDecimal(1), 200));
		Assert.assertTrue(bf.validate("300714005-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(620600), new BigDecimal(1), 200));
		Assert.assertTrue(bf.validate("300714006-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(184800), new BigDecimal(1), 200));
		Assert.assertTrue(bf.validate("300714011-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(805400), new BigDecimal(1), 200));
	}
	
	
	
	
	@Test
	public void testValidate2() {
		Assert.assertTrue(bf.validate("300711001-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(80000), new BigDecimal(10), 200));
		Assert.assertTrue(bf.validate("300712001-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(616000), new BigDecimal(10), 200));
		Assert.assertTrue(bf.validate("300713001-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(1876000), new BigDecimal(10), 200));
		Assert.assertTrue(bf.validate("300714001-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(2454000), new BigDecimal(10), 200));
		
		Assert.assertTrue(bf.validate("300713003-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(1848000), new BigDecimal(10), 200));
		Assert.assertTrue(bf.validate("300713004-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(3724000), new BigDecimal(10), 200));
		
		Assert.assertTrue(bf.validate("300714004-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(3752000), new BigDecimal(10), 200));
		Assert.assertTrue(bf.validate("300714005-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(6206000), new BigDecimal(10), 200));
		Assert.assertTrue(bf.validate("300714006-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(1848000), new BigDecimal(10), 200));
		Assert.assertTrue(bf.validate("300714011-20140402001(90,10,20,21,30,31,32,40,41,42,50,51,52,99,00,11,22,33,09,01,02,12,03,13,23,04,14,24,05,15,25)|20140402002(90,10,20)|20140402003(09,01,02)|20140402004(10,01)|20140402005(10)^", new BigDecimal(8054000), new BigDecimal(10), 200));
	}
}
